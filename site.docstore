begin.
assertz(col(config,'08f2de19-3d95-4559-ae1d-cac8383ce8fb')).
assertz(eav('08f2de19-3d95-4559-ae1d-cac8383ce8fb',name,title)).
assertz(eav('08f2de19-3d95-4559-ae1d-cac8383ce8fb',value,'Untitled site')).
assertz(col(migration,'7a989cb5-f5e6-4ba7-a18b-63735602b9bc')).
assertz(eav('7a989cb5-f5e6-4ba7-a18b-63735602b9bc',description,'Inserts the initial config')).
assertz(eav('7a989cb5-f5e6-4ba7-a18b-63735602b9bc',name,bc_initial_config)).
end.
begin.
assertz(col(user,'0f82ee2d-d0e9-4a7d-ae36-416a9a1a8c16')).
assertz(eav('0f82ee2d-d0e9-4a7d-ae36-416a9a1a8c16',files,true)).
assertz(eav('0f82ee2d-d0e9-4a7d-ae36-416a9a1a8c16',fullname,'Admin')).
assertz(eav('0f82ee2d-d0e9-4a7d-ae36-416a9a1a8c16',key,'d0e6433f-2f30-469d-a7c3-1c66c6d5a929')).
assertz(eav('0f82ee2d-d0e9-4a7d-ae36-416a9a1a8c16',link,"")).
assertz(eav('0f82ee2d-d0e9-4a7d-ae36-416a9a1a8c16',password,'5afd9cdb6078e29040ee6bc559364665cb65cde7deed4aa81b45f157c5d3eb23')).
assertz(eav('0f82ee2d-d0e9-4a7d-ae36-416a9a1a8c16',salt,'81dc2152-6c3c-4140-a224-f7adbfa31487')).
assertz(eav('0f82ee2d-d0e9-4a7d-ae36-416a9a1a8c16',type,admin)).
assertz(eav('0f82ee2d-d0e9-4a7d-ae36-416a9a1a8c16',username,'admin@example.com')).
assertz(col(migration,'414931ca-280a-438f-aedd-cd2a50108b8c')).
assertz(eav('414931ca-280a-438f-aedd-cd2a50108b8c',description,'Inserts the initial user')).
assertz(eav('414931ca-280a-438f-aedd-cd2a50108b8c',name,bc_initial_user)).
end.
begin.
assertz(col(config,'fb8170a2-bb79-49b0-a641-4c163c783b19')).
assertz(eav('fb8170a2-bb79-49b0-a641-4c163c783b19',name,default_language)).
assertz(eav('fb8170a2-bb79-49b0-a641-4c163c783b19',value,en)).
assertz(col(migration,'284d8b0d-c9ae-442a-a2fe-e7105889eb3f')).
assertz(eav('284d8b0d-c9ae-442a-a2fe-e7105889eb3f',description,'Adds language to posts')).
assertz(eav('284d8b0d-c9ae-442a-a2fe-e7105889eb3f',name,bc_add_language)).
end.
begin.
assertz(col(config,'c1aa9236-ba22-44ed-a6d0-684af4ad0a60')).
assertz(eav('c1aa9236-ba22-44ed-a6d0-684af4ad0a60',name,smtp_enabled)).
assertz(eav('c1aa9236-ba22-44ed-a6d0-684af4ad0a60',value,false)).
assertz(col(config,'8ab00216-4af4-4a10-a442-1735663d54c0')).
assertz(eav('8ab00216-4af4-4a10-a442-1735663d54c0',name,smtp_host)).
assertz(eav('8ab00216-4af4-4a10-a442-1735663d54c0',value,localhost)).
assertz(col(config,'798bebf5-2cb0-4f65-a3b6-bf325b4409f1')).
assertz(eav('798bebf5-2cb0-4f65-a3b6-bf325b4409f1',name,smtp_user)).
assertz(eav('798bebf5-2cb0-4f65-a3b6-bf325b4409f1',value,user)).
assertz(col(config,'ef5d088d-566c-4706-a38a-78314b5e2296')).
assertz(eav('ef5d088d-566c-4706-a38a-78314b5e2296',name,smtp_password)).
assertz(eav('ef5d088d-566c-4706-a38a-78314b5e2296',value,password)).
assertz(col(config,'8ddd620e-553d-41f2-a4c7-deb7df092b67')).
assertz(eav('8ddd620e-553d-41f2-a4c7-deb7df092b67',name,smtp_auth)).
assertz(eav('8ddd620e-553d-41f2-a4c7-deb7df092b67',value,login)).
assertz(col(migration,'a330cb52-cdf9-46fc-a7ec-de8e28c1f80a')).
assertz(eav('a330cb52-cdf9-46fc-a7ec-de8e28c1f80a',description,'Adds SMTP settings')).
assertz(eav('a330cb52-cdf9-46fc-a7ec-de8e28c1f80a',name,bc_smtp_settings)).
end.
begin.
assertz(col(entry,'49e60b28-12f2-42bf-ab94-b9f371802e7a')).
assertz(eav('49e60b28-12f2-42bf-ab94-b9f371802e7a',author,'0f82ee2d-d0e9-4a7d-ae36-416a9a1a8c16')).
assertz(eav('49e60b28-12f2-42bf-ab94-b9f371802e7a',commenting,true)).
assertz(eav('49e60b28-12f2-42bf-ab94-b9f371802e7a',content,"My first Blog-Core site")).
assertz(eav('49e60b28-12f2-42bf-ab94-b9f371802e7a',content_type,markdown)).
assertz(eav('49e60b28-12f2-42bf-ab94-b9f371802e7a',date_updated,1422662400)).
assertz(eav('49e60b28-12f2-42bf-ab94-b9f371802e7a',description,"")).
assertz(eav('49e60b28-12f2-42bf-ab94-b9f371802e7a',html,"\n\n<p>\nMy first Blog-Core site</p>")).
assertz(eav('49e60b28-12f2-42bf-ab94-b9f371802e7a',language,"en")).
assertz(eav('49e60b28-12f2-42bf-ab94-b9f371802e7a',published,false)).
assertz(eav('49e60b28-12f2-42bf-ab94-b9f371802e7a',slug,about)).
assertz(eav('49e60b28-12f2-42bf-ab94-b9f371802e7a',tags,[])).
assertz(eav('49e60b28-12f2-42bf-ab94-b9f371802e7a',title,"About")).
assertz(eav('49e60b28-12f2-42bf-ab94-b9f371802e7a',type,block)).
end.
begin.
end.
begin.
assertz(col(entry,'085fe3d9-305a-49d7-ae07-b34fb5d521e7')).
assertz(eav('085fe3d9-305a-49d7-ae07-b34fb5d521e7',author,'0f82ee2d-d0e9-4a7d-ae36-416a9a1a8c16')).
assertz(eav('085fe3d9-305a-49d7-ae07-b34fb5d521e7',commenting,true)).
assertz(eav('085fe3d9-305a-49d7-ae07-b34fb5d521e7',content,"Hello World from prolog")).
assertz(eav('085fe3d9-305a-49d7-ae07-b34fb5d521e7',content_type,markdown)).
assertz(eav('085fe3d9-305a-49d7-ae07-b34fb5d521e7',date_updated,1422662400)).
assertz(eav('085fe3d9-305a-49d7-ae07-b34fb5d521e7',description,"")).
assertz(eav('085fe3d9-305a-49d7-ae07-b34fb5d521e7',html,"\n\n<p>\nHello World from prolog</p>")).
assertz(eav('085fe3d9-305a-49d7-ae07-b34fb5d521e7',language,"en")).
assertz(eav('085fe3d9-305a-49d7-ae07-b34fb5d521e7',published,false)).
assertz(eav('085fe3d9-305a-49d7-ae07-b34fb5d521e7',slug,hello)).
assertz(eav('085fe3d9-305a-49d7-ae07-b34fb5d521e7',tags,[])).
assertz(eav('085fe3d9-305a-49d7-ae07-b34fb5d521e7',title,"hello")).
assertz(eav('085fe3d9-305a-49d7-ae07-b34fb5d521e7',type,block)).
end.
begin.
retractall(eav('085fe3d9-305a-49d7-ae07-b34fb5d521e7',_G3890,_G3891)).
retractall(col(_G3889,'085fe3d9-305a-49d7-ae07-b34fb5d521e7')).
end.
begin.
end.
begin.
assertz(col(entry,'7817c45b-e5ee-4eee-a31a-80d71d1341f8')).
assertz(eav('7817c45b-e5ee-4eee-a31a-80d71d1341f8',author,'0f82ee2d-d0e9-4a7d-ae36-416a9a1a8c16')).
assertz(eav('7817c45b-e5ee-4eee-a31a-80d71d1341f8',commenting,true)).
assertz(eav('7817c45b-e5ee-4eee-a31a-80d71d1341f8',content,"helol world")).
assertz(eav('7817c45b-e5ee-4eee-a31a-80d71d1341f8',content_type,markdown)).
assertz(eav('7817c45b-e5ee-4eee-a31a-80d71d1341f8',date_updated,1422662400)).
assertz(eav('7817c45b-e5ee-4eee-a31a-80d71d1341f8',description,"")).
assertz(eav('7817c45b-e5ee-4eee-a31a-80d71d1341f8',html,"\n\n<p>\nhelol world</p>")).
assertz(eav('7817c45b-e5ee-4eee-a31a-80d71d1341f8',language,"en")).
assertz(eav('7817c45b-e5ee-4eee-a31a-80d71d1341f8',published,false)).
assertz(eav('7817c45b-e5ee-4eee-a31a-80d71d1341f8',slug,hello)).
assertz(eav('7817c45b-e5ee-4eee-a31a-80d71d1341f8',tags,[])).
assertz(eav('7817c45b-e5ee-4eee-a31a-80d71d1341f8',title,"hello")).
assertz(eav('7817c45b-e5ee-4eee-a31a-80d71d1341f8',type,page)).
end.
begin.
retractall(eav('7817c45b-e5ee-4eee-a31a-80d71d1341f8',_G3889,_G3890)).
retractall(col(_G3888,'7817c45b-e5ee-4eee-a31a-80d71d1341f8')).
end.
begin.
end.
begin.
assertz(col(entry,'28ee531f-2083-4095-a10d-e4315502e0f0')).
assertz(eav('28ee531f-2083-4095-a10d-e4315502e0f0',author,'0f82ee2d-d0e9-4a7d-ae36-416a9a1a8c16')).
assertz(eav('28ee531f-2083-4095-a10d-e4315502e0f0',commenting,true)).
assertz(eav('28ee531f-2083-4095-a10d-e4315502e0f0',content,"testing")).
assertz(eav('28ee531f-2083-4095-a10d-e4315502e0f0',content_type,markdown)).
assertz(eav('28ee531f-2083-4095-a10d-e4315502e0f0',date_updated,1422662400)).
assertz(eav('28ee531f-2083-4095-a10d-e4315502e0f0',description,"")).
assertz(eav('28ee531f-2083-4095-a10d-e4315502e0f0',html,"\n\n<p>\ntesting</p>")).
assertz(eav('28ee531f-2083-4095-a10d-e4315502e0f0',language,"en")).
assertz(eav('28ee531f-2083-4095-a10d-e4315502e0f0',published,false)).
assertz(eav('28ee531f-2083-4095-a10d-e4315502e0f0',slug,hello)).
assertz(eav('28ee531f-2083-4095-a10d-e4315502e0f0',tags,[])).
assertz(eav('28ee531f-2083-4095-a10d-e4315502e0f0',title,"hello")).
assertz(eav('28ee531f-2083-4095-a10d-e4315502e0f0',type,page)).
end.
begin.
retractall(eav('49e60b28-12f2-42bf-ab94-b9f371802e7a',_G3890,_G3891)).
retractall(col(_G3889,'49e60b28-12f2-42bf-ab94-b9f371802e7a')).
end.
begin.
end.
begin.
retractall(eav('28ee531f-2083-4095-a10d-e4315502e0f0',_G3886,_G3887)).
retractall(col(_G3885,'28ee531f-2083-4095-a10d-e4315502e0f0')).
end.
begin.
end.
begin.
assertz(col(entry,'6d3f86c9-4c64-4759-af7a-700f9e41d5ab')).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',author,'0f82ee2d-d0e9-4a7d-ae36-416a9a1a8c16')).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',commenting,true)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"What is a Prolog Planner? A prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. To be able to plan, a system needs to be able to reason about the individual and cumulative effects of a series of actions.")).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content_type,markdown)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',date_updated,1422662400)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',description,"Description of what is a Prolog planner")).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<p>\nWhat is a Prolog Planner? A prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. To be able to plan, a system needs to be able to reason about the individual and cumulative effects of a series of actions.</p>")).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',language,"en")).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',published,false)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',slug,'prolog-planners')).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',tags,[])).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',title,"Prolog Planners")).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',type,page)).
end.
begin.
end.
begin.
end.
begin.
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G5464)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"What is a Prolog Planner? \n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. \n\nTo be able to plan, a system needs to be able to reason about the individual and cumulative effects of a series of actions.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G5464)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<p>\nWhat is a Prolog Planner? </p>\n\n<p>\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. </p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about the individual and cumulative effects of a series of actions.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G5461)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"What is a Prolog Planner? \nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. \nTo be able to plan, a system needs to be able to reason about the individual and cumulative effects of a series of actions.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G5461)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<p>\nWhat is a Prolog Planner? \nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. \nTo be able to plan, a system needs to be able to reason about the individual and cumulative effects of a series of actions.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G12061)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"What is a Prolog Planner? \n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. \n\nTo be able to plan, a system needs to be able to reason about the individual and cumulative effects of a series of actions.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G12061)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<p>\nWhat is a Prolog Planner? </p>\n\n<p>\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. </p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about the individual and cumulative effects of a series of actions.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G11531)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"What is a Prolog Planner? \n\nExpert systems are computer programs that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. They differ from conventional programs in that facts and rules are separate from a program's underlying control structure and a program's reasoning can be explained easily to the user. Although operational systems to aid planners have not yet been completed, prototype systems have been built in areas such as site planning and park management. The potential value of expert systems to planners is great, and thus planners should follow developments in this rapidly changing field.\n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. Planners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas\n\nTo be able to plan, a system needs to be able to reason about the individual and cumulative effects of a series of actions.\n\nConsider the following example problem:")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G11531)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<p>\nWhat is a Prolog Planner? </p>\n\n<p>\nExpert systems are computer programs that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. They differ from conventional programs in that facts and rules are separate from a program's underlying control structure and a program's reasoning can be explained easily to the user. Although operational systems to aid planners have not yet been completed, prototype systems have been built in areas such as site planning and park management. The potential value of expert systems to planners is great, and thus planners should follow developments in this rapidly changing field.</p>\n\n<p>\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. Planners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about the individual and cumulative effects of a series of actions.</p>\n\n<p>\nConsider the following example problem:</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G12280)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"What is a Prolog Planner? \n\nExpert systems are computer programs that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. They differ from conventional programs in that facts and rules are separate from a program's underlying control structure and a program's reasoning can be explained easily to the user. Although operational systems to aid planners have not yet been completed, prototype systems have been built in areas such as site planning and park management. The potential value of expert systems to planners is great, and thus planners should follow developments in this rapidly changing field.\n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas\n\nTo be able to plan, a system needs to be able to reason about the individual and cumulative effects of a series of actions.\n\nConsider the following example problem:")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G12280)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<p>\nWhat is a Prolog Planner? </p>\n\n<p>\nExpert systems are computer programs that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. They differ from conventional programs in that facts and rules are separate from a program's underlying control structure and a program's reasoning can be explained easily to the user. Although operational systems to aid planners have not yet been completed, prototype systems have been built in areas such as site planning and park management. The potential value of expert systems to planners is great, and thus planners should follow developments in this rapidly changing field.</p>\n\n<p>\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about the individual and cumulative effects of a series of actions.</p>\n\n<p>\nConsider the following example problem:</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G5867)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"What is a Prolog Planner? \n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nTo be able to plan, a system needs to be able to reason about the individual and cumulative effects of a series of actions.\n\nConsider the following example problem:")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G5867)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<p>\nWhat is a Prolog Planner? </p>\n\n<p>\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about the individual and cumulative effects of a series of actions.</p>\n\n<p>\nConsider the following example problem:</p>")).
end.
begin.
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G7225)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"What is a Prolog Planner? \n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. \n\n\n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nTo be able to plan, a system needs to be able to reason about the individual and cumulative effects of a series of actions.\n\nConsider the following example problem:")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G13766)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"What is a Prolog Planner? \n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nTo be able to plan, a system needs to be able to reason about the individual and cumulative effects of a series of actions.\n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. In the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G13766)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<p>\nWhat is a Prolog Planner? </p>\n\n<p>\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about the individual and cumulative effects of a series of actions.</p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. In the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>")).
end.
begin.
end.
begin.
end.
begin.
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G10754)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"What is a Prolog Planner? \n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. In the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n– We need to define a representation for two things:\n1. how will we represent the state of the world?\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n1 initial state\n2 current state\n3 goal state\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n– objects: a monkey, a box, the bananas, and a floor.\n– locations: we’ll call them a, b, and c.\n– relations of objects to locations. For example:\n• the monkey is at location a;\n• the monkey is on the floor;\n• the bananas are hanging;\n• the box is in the same location as the bananas.\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',date_updated,_G10754)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',date_updated,1422748800)).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G10754)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<p>\nWhat is a Prolog Planner? </p>\n\n<p>\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. In the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>how will we represent the state of the world?</li>\n<li>how will we represent actions and their local effect on the world?</li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:\n1 initial state\n2 current state\n3 goal state\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:\n– objects: a monkey, a box, the bananas, and a floor.\n– locations: we’ll call them a, b, and c.\n– relations of objects to locations. For example:\n• the monkey is at location a;\n• the monkey is on the floor;\n• the bananas are hanging;\n• the box is in the same location as the bananas.\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G15351)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"What is a Prolog Planner? \n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n– We need to define a representation for two things:\n1. how will we represent the state of the world?\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n1 initial state\n2 current state\n3 goal state\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n– objects: a monkey, a box, the bananas, and a floor.\n– locations: we’ll call them a, b, and c.\n– relations of objects to locations. For example:\n• the monkey is at location a;\n• the monkey is on the floor;\n• the bananas are hanging;\n• the box is in the same location as the bananas.\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G15351)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<p>\nWhat is a Prolog Planner? </p>\n\n<p>\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. </p>\n\n<p>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>how will we represent the state of the world?</li>\n<li>how will we represent actions and their local effect on the world?</li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:\n1 initial state\n2 current state\n3 goal state\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:\n– objects: a monkey, a box, the bananas, and a floor.\n– locations: we’ll call them a, b, and c.\n– relations of objects to locations. For example:\n• the monkey is at location a;\n• the monkey is on the floor;\n• the bananas are hanging;\n• the box is in the same location as the bananas.\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G17193)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G17193)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<p>\nWhat is a Prolog Planner?</p>\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. </p>\n\n<p>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G18597)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"====================\nWhat is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G18597)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<p>\n====================\nWhat is a Prolog Planner?</p>\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. </p>\n\n<p>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G17327)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"What is a Prolog Planner?\n====================\n\n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G17327)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h1>What is a Prolog Planner?</h1>\n\n<p>\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. </p>\n\n<p>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G17624)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G17624)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<p>\nWhat is a Prolog Planner?</p>\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. </p>\n\n<p>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G20162)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"# What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G20162)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h1>What is a Prolog Planner?</h1>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. </p>\n\n<p>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G17980)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"## What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G17980)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h2>What is a Prolog Planner?</h2>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. </p>\n\n<p>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G20165)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"#### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G20165)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h4>What is a Prolog Planner?</h4>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the end user to reach the desired\ngoal produced by a system. </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. </p>\n\n<p>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G18060)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"#### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired goal produced by a system.  \n\nreturn \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G18060)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h4>What is a Prolog Planner?</h4>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the end user to reach the desired goal produced by a system.  </p>\n\n<p>\nreturn </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. </p>\n\n<p>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G19597)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"#### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the end user to reach the desired goal produced by a system.  \n\n \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G19597)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h4>What is a Prolog Planner?</h4>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the end user to reach the desired goal produced by a system.  </p>\n\n<p>\n </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. </p>\n\n<p>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G20335)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"#### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the \nend user to reach the desired goal produced by a system.  \n\n \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G20335)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h4>What is a Prolog Planner?</h4>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the \nend user to reach the desired goal produced by a system.  </p>\n\n<p>\n </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. </p>\n\n<p>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G18130)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"#### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the \n\nend user to reach the desired goal produced by a system.  \n\n \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G18130)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h4>What is a Prolog Planner?</h4>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the </p>\n\n<p>\nend user to reach the desired goal produced by a system.  </p>\n\n<p>\n </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. </p>\n\n<p>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G20251)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"#### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the \nend user to reach the desired goal produced by a system.  \n\n \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G20251)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h4>What is a Prolog Planner?</h4>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the \nend user to reach the desired goal produced by a system.  </p>\n\n<p>\n </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. </p>\n\n<p>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G20317)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"#### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the     \n\nend user to reach the desired goal produced by a system.  \n\n \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G20317)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h4>What is a Prolog Planner?</h4>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the     </p>\n\n<p>\nend user to reach the desired goal produced by a system.  </p>\n\n<p>\n </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. </p>\n\n<p>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G20254)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"#### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  \n\n \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G20254)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h4>What is a Prolog Planner?</h4>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  </p>\n\n<p>\n </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. </p>\n\n<p>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G20394)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"#### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the  return\nend user to reach the desired goal produced by a system.  \n\n \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G20394)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h4>What is a Prolog Planner?</h4>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the  return\nend user to reach the desired goal produced by a system.  </p>\n\n<p>\n </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. </p>\n\n<p>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G20451)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"#### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the\n  return\nend user to reach the desired goal produced by a system.  \n\n \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\nConsider the following example problem:\n\n\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\nThe hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G20451)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h4>What is a Prolog Planner?</h4>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the\n  return\nend user to reach the desired goal produced by a system.  </p>\n\n<p>\n </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<p>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. </p>\n\n<p>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?</p>\n\n<p>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.</p>\n\n<p>\nThe hungry monkey is now a happy monkey.</p>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G24017)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"#### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\n\n\nConsider the following example problem:\n\n\n>A hungry monkey is in a room. Suspended from the roof, just\n>out of his reach, is a bunch of bananas. \n\n>In the corner of the\n>room is a box. The monkey desperately wants the bananas\n>but he can’t reach them. What shall he do?\n\n>After several unsuccessful attempts to reach the bananas, the\n>monkey walks to the box, pushes it under the bananas, climbs\n>on the box, picks the bananas and eats them.\n\n>The hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G24017)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h4>What is a Prolog Planner?</h4>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\nConsider the following example problem:</p>\n\n<blockquote>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas.\n</blockquote>\n\n<blockquote>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n</blockquote>\n\n<blockquote>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n</blockquote>\n\n<blockquote>\nThe hungry monkey is now a happy monkey.\n</blockquote>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G23986)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"#### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\n\n\nConsider the following example problem:\n\n\n>A hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\n>In the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\n>After several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\n>The hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G22733)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\n\n\n####Consider the following example problem:\n\n\n>A hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\n>In the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\n>After several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\n>The hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G22733)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h3>What is a Prolog Planner?</h3>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<p>\n####Consider the following example problem:</p>\n\n<blockquote>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas.\n</blockquote>\n\n<blockquote>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n</blockquote>\n\n<blockquote>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n</blockquote>\n\n<blockquote>\nThe hungry monkey is now a happy monkey.\n</blockquote>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G24047)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  \n\n\n\n#### Consider the following example problem:\n\n\n>A hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\n>In the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\n>After several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\n>The hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G24047)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h3>What is a Prolog Planner?</h3>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.  </p>\n\n<h4>Consider the following example problem:</h4>\n\n<blockquote>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas.\n</blockquote>\n\n<blockquote>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n</blockquote>\n\n<blockquote>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n</blockquote>\n\n<blockquote>\nThe hungry monkey is now a happy monkey.\n</blockquote>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G24035)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.    \n\n\n\n\n\n\n\n#### Consider the following example problem:\n\n\n>A hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\n>In the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\n>After several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\n>The hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G24035)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h3>What is a Prolog Planner?</h3>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.    </p>\n\n<h4>Consider the following example problem:</h4>\n\n<blockquote>\nA hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas.\n</blockquote>\n\n<blockquote>\nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n</blockquote>\n\n<blockquote>\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n</blockquote>\n\n<blockquote>\nThe hungry monkey is now a happy monkey.\n</blockquote>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G23225)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.    \n  \n  \n  \n\n#### Consider the following example problem:\n\n\n>A hungry monkey is in a room. Suspended from the roof, just\nout of his reach, is a bunch of bananas. \n\n>In the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\n\n>After several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\n\n>The hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G26641)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.    \n  \n  \n  \n\n#### Consider the following example problem:\n\n\n>A hungry monkey is in a room. Suspended from the roof, \n>just out of his reach, is a bunch of bananas. \n>In the corner of the\n>room is a box. The monkey desperately wants the bananas\n>but he can’t reach them. What shall he do?\n>After several unsuccessful attempts to reach the bananas, the\n>monkey walks to the box, pushes it under the bananas, climbs\n>on the box, picks the bananas and eats them.\n>The hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G26641)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h3>What is a Prolog Planner?</h3>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.    </p>\n\n<h4>Consider the following example problem:</h4>\n\n<blockquote>\nA hungry monkey is in a room. Suspended from the roof, \njust out of his reach, is a bunch of bananas. \nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\nThe hungry monkey is now a happy monkey.\n</blockquote>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n\n<p>\n– Actions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n– However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n– A good planning representation should therefore take into account\nthis locality of the effects of actions.</p>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G29591)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.    \n  \n  \n  \n\n#### Consider the following example problem:\n\n\n>A hungry monkey is in a room. Suspended from the roof, \n>just out of his reach, is a bunch of bananas. \n>In the corner of the\n>room is a box. The monkey desperately wants the bananas\n>but he can’t reach them. What shall he do?\n>After several unsuccessful attempts to reach the bananas, the\n>monkey walks to the box, pushes it under the bananas, climbs\n>on the box, picks the bananas and eats them.\n>The hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n* Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n* However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n* A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n– We need to define a representation for two things:\n\n1. how will we represent the state of the world?\n\n2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G29591)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h3>What is a Prolog Planner?</h3>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.    </p>\n\n<h4>Consider the following example problem:</h4>\n\n<blockquote>\nA hungry monkey is in a room. Suspended from the roof, \njust out of his reach, is a bunch of bananas. \nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\nThe hungry monkey is now a happy monkey.\n</blockquote>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n<ul>\n<li>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p></li>\n<li>\n\n<p>\nHowever an action does not normally change everything in the\ncurrent state, just some components of the state.</p></li>\n<li>\n\n<p>\nA good planning representation should therefore take into account\nthis locality of the effects of actions.</p></li>\n</ul>\n\n<p>\n– We need to define a representation for two things:</p>\n\n<ol>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ol>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G31406)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.    \n  \n  \n  \n\n#### Consider the following example problem:\n\n\n>A hungry monkey is in a room. Suspended from the roof, \n>just out of his reach, is a bunch of bananas. \n>In the corner of the\n>room is a box. The monkey desperately wants the bananas\n>but he can’t reach them. What shall he do?\n>After several unsuccessful attempts to reach the bananas, the\n>monkey walks to the box, pushes it under the bananas, climbs\n>on the box, picks the bananas and eats them.\n>The hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n* Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n* However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n* A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n\n*We need to define a representation for two things:*\n\n* 1. how will we represent the state of the world?\n\n* 2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G3911)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h3>What is a Prolog Planner?</h3>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.    </p>\n\n<h4>Consider the following example problem:</h4>\n\n<blockquote>\nA hungry monkey is in a room. Suspended from the roof, \njust out of his reach, is a bunch of bananas. \nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\nThe hungry monkey is now a happy monkey.\n</blockquote>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n<ul>\n<li>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p></li>\n<li>\n\n<p>\nHowever an action does not normally change everything in the\ncurrent state, just some components of the state.</p></li>\n<li>\n\n<p>\nA good planning representation should therefore take into account\nthis locality of the effects of actions.</p></li>\n</ul>\n\n<p>\n<em>We need to define a representation for two things:</em></p>\n<ul>\n<li>\n\n<ol>\n<li>how will we represent the state of the world?</li>\n</ol>\n\n</li>\n<li>\n\n<ol>\n<li>how will we represent actions and their local effect on the world?</li>\n</ol>\n\n</li>\n</ul>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G31439)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.    \n  \n  \n  \n\n#### Consider the following example problem:\n\n\n>A hungry monkey is in a room. Suspended from the roof, \n>just out of his reach, is a bunch of bananas. \n>In the corner of the\n>room is a box. The monkey desperately wants the bananas\n>but he can’t reach them. What shall he do?\n>After several unsuccessful attempts to reach the bananas, the\n>monkey walks to the box, pushes it under the bananas, climbs\n>on the box, picks the bananas and eats them.\n>The hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n* Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n* However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n* A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n\n*We need to define a representation for two things:*\n\n - 1. how will we represent the state of the world?\n\n - 2. how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G29761)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.    \n  \n  \n  \n\n#### Consider the following example problem:\n\n\n>A hungry monkey is in a room. Suspended from the roof, \n>just out of his reach, is a bunch of bananas. \n>In the corner of the\n>room is a box. The monkey desperately wants the bananas\n>but he can’t reach them. What shall he do?\n>After several unsuccessful attempts to reach the bananas, the\n>monkey walks to the box, pushes it under the bananas, climbs\n>on the box, picks the bananas and eats them.\n>The hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n* Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n* However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n* A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n\n*We need to define a representation for two things:*\n\n - how will we represent the state of the world?\n\n - how will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n• We need to be able to represent three states of the world:\n\n\n1. initial state\n\n2. current state\n\n3. goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G29761)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h3>What is a Prolog Planner?</h3>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.    </p>\n\n<h4>Consider the following example problem:</h4>\n\n<blockquote>\nA hungry monkey is in a room. Suspended from the roof, \njust out of his reach, is a bunch of bananas. \nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\nThe hungry monkey is now a happy monkey.\n</blockquote>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n<ul>\n<li>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p></li>\n<li>\n\n<p>\nHowever an action does not normally change everything in the\ncurrent state, just some components of the state.</p></li>\n<li>\n\n<p>\nA good planning representation should therefore take into account\nthis locality of the effects of actions.</p></li>\n</ul>\n\n<p>\n<em>We need to define a representation for two things:</em></p>\n<ul>\n<li>\n\n<p>\nhow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nhow will we represent actions and their local effect on the world?</p></li>\n</ul>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n\n<p>\n• However an action does not normally change everything in the\ncurrent state, just some components of the state.</p>\n\n<p>\n• A good planning representation should therefore take into\naccount this locality of the effects of actions.</p>\n\n<p>\n• We need to be able to represent three states of the world:</p>\n\n<ol>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ol>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G30625)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.    \n  \n  \n  \n\n#### Consider the following example problem:\n\n\n>A hungry monkey is in a room. Suspended from the roof, \n>just out of his reach, is a bunch of bananas. \n>In the corner of the\n>room is a box. The monkey desperately wants the bananas\n>but he can’t reach them. What shall he do?\n>After several unsuccessful attempts to reach the bananas, the\n>monkey walks to the box, pushes it under the bananas, climbs\n>on the box, picks the bananas and eats them.\n>The hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n* Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n* However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n* A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n\n*We need to define a representation for two things:*\n\n - How will we represent the state of the world?\n\n - How will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n - However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n - A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n*We need to be able to represent three states of the world:*\n\n\n- initial state\n\n- current state\n\n- goal state\n\n\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.\n\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.\n\n\n\nIn the M&B problem we have:\n\n\n– objects: a monkey, a box, the bananas, and a floor.\n\n– locations: we’ll call them a, b, and c.\n\n– relations of objects to locations. For example:\n\n• the monkey is at location a;\n\n• the monkey is on the floor;\n\n• the bananas are hanging;\n\n• the box is in the same location as the bananas.\n\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).\n\n\n\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G3909)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h3>What is a Prolog Planner?</h3>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.    </p>\n\n<h4>Consider the following example problem:</h4>\n\n<blockquote>\nA hungry monkey is in a room. Suspended from the roof, \njust out of his reach, is a bunch of bananas. \nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\nThe hungry monkey is now a happy monkey.\n</blockquote>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n<ul>\n<li>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p></li>\n<li>\n\n<p>\nHowever an action does not normally change everything in the\ncurrent state, just some components of the state.</p></li>\n<li>\n\n<p>\nA good planning representation should therefore take into account\nthis locality of the effects of actions.</p></li>\n</ul>\n\n<p>\n<em>We need to define a representation for two things:</em></p>\n<ul>\n<li>\n\n<p>\nHow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nHow will we represent actions and their local effect on the world?</p></li>\n</ul>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n<ul>\n<li>\n\n<p>\nHowever an action does not normally change everything in the\ncurrent state, just some components of the state.</p></li>\n<li>\n\n<p>\nA good planning representation should therefore take into\naccount this locality of the effects of actions.</p></li>\n</ul>\n\n<p>\n<em>We need to be able to represent three states of the world:</em></p>\n<ul>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ul>\n\n<p>\n• To facilitate the reasoning about the local effects of actions, a\nstate will be represented as a list of relationships that are\ncurrently true.</p>\n\n<p>\n• Of course, we choose to mention only those relationships that\npertain to the planning problem.</p>\n\n<p>\nIn the M&amp;B problem we have:</p>\n\n<p>\n– objects: a monkey, a box, the bananas, and a floor.</p>\n\n<p>\n– locations: we’ll call them a, b, and c.</p>\n\n<p>\n– relations of objects to locations. For example:</p>\n\n<p>\n• the monkey is at location a;</p>\n\n<p>\n• the monkey is on the floor;</p>\n\n<p>\n• the bananas are hanging;</p>\n\n<p>\n• the box is in the same location as the bananas.</p>\n\n<p>\n• To represent these relations we need to choose appropriate\npredicates and arguments:\n• at(monkey,a).\n• on(monkey,floor).\n• status(bananas,hanging).\n• at(box,X), at(bananas,X).</p>\n\n<p>\nOnce we have decided on appropriate state predicates we need to\nrepresent the Initial and Goal states.\n• Initial State:\n on(monkey, floor),\n on(box, floor),\n at(monkey, a),\n at(box, b),\n at(bananas, c),\n status(bananas, hanging).\n• Goal State:\n on(monkey, box),\n on(box, floor),\n at(monkey, c),\n at(box, c),\n at(bananas, c),\n status(bananas, grabbed).\n• These states can be represented by the list of these relationships.</p>")).
end.
begin.
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,_G32100)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',content,"### What is a Prolog Planner?\n------------------------- \n\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  \n\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. \n\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.    \n  \n#### Consider the following example problem:\n\n\n>A hungry monkey is in a room. Suspended from the roof, \n>just out of his reach, is a bunch of bananas. \n>In the corner of the\n>room is a box. The monkey desperately wants the bananas\n>but he can’t reach them. What shall he do?\n>After several unsuccessful attempts to reach the bananas, the\n>monkey walks to the box, pushes it under the bananas, climbs\n>on the box, picks the bananas and eats them.\n>The hungry monkey is now a happy monkey.\n\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.\n\n\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.\n\n* Actions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n* However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n* A good planning representation should therefore take into account\nthis locality of the effects of actions.\n\n\n*We need to define a representation for two things:*\n\n - How will we represent the state of the world?\n\n - How will we represent actions and their local effect on the world?\n\n\n\nActions change the current state of the planning world, thereby\ncausing transitions to new states.\n\n - However an action does not normally change everything in the\ncurrent state, just some components of the state.\n\n - A good planning representation should therefore take into\naccount this locality of the effects of actions.\n\n\n\n*We need to be able to represent three states of the world:*\n\n\n- initial state\n\n- current state\n\n- goal state\n\nWith these 3 states, anyone can construct a planner that produces a outcome based on the input of the user.\n\nThere are many kind of planners, such as STRIPS, CLP(FD)and FRAME. This website will cover and walk through \nsome STRIPS style, and also briefly cover the implementaions of CLP(FD) and FRAME.")).
retractall(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,_G3004)).
assertz(eav('6d3f86c9-4c64-4759-af7a-700f9e41d5ab',html,"\n\n<h3>What is a Prolog Planner?</h3>\n\n<hr>\n\n<p>\nA prolog planner is a sequence of actions that would allow the\nend user to reach the desired goal produced by a system.  </p>\n\n<p>\nPlanners are a subset of expert systems that apply artificial intelligence programming techniques to problems that involve narrow, clearly defined subject areas. </p>\n\n<p>\nThey differ from conventional programs in which facts and rules are separated from a program's underlying control structure and a program's reasoning can be explained simply to the user.    </p>\n\n<h4>Consider the following example problem:</h4>\n\n<blockquote>\nA hungry monkey is in a room. Suspended from the roof, \njust out of his reach, is a bunch of bananas. \nIn the corner of the\nroom is a box. The monkey desperately wants the bananas\nbut he can’t reach them. What shall he do?\nAfter several unsuccessful attempts to reach the bananas, the\nmonkey walks to the box, pushes it under the bananas, climbs\non the box, picks the bananas and eats them.\nThe hungry monkey is now a happy monkey.\n</blockquote>\n\n<p>\nTo solve this problem the monkey needed to devise a plan, a\nsequence of actions that would allow him to reach the desired\ngoal.</p>\n\n<p>\nTo be able to plan, a system needs to be able to reason about\nthe individual and cumulative effects of a series of actions.</p>\n<ul>\n<li>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p></li>\n<li>\n\n<p>\nHowever an action does not normally change everything in the\ncurrent state, just some components of the state.</p></li>\n<li>\n\n<p>\nA good planning representation should therefore take into account\nthis locality of the effects of actions.</p></li>\n</ul>\n\n<p>\n<em>We need to define a representation for two things:</em></p>\n<ul>\n<li>\n\n<p>\nHow will we represent the state of the world?</p></li>\n<li>\n\n<p>\nHow will we represent actions and their local effect on the world?</p></li>\n</ul>\n\n<p>\nActions change the current state of the planning world, thereby\ncausing transitions to new states.</p>\n<ul>\n<li>\n\n<p>\nHowever an action does not normally change everything in the\ncurrent state, just some components of the state.</p></li>\n<li>\n\n<p>\nA good planning representation should therefore take into\naccount this locality of the effects of actions.</p></li>\n</ul>\n\n<p>\n<em>We need to be able to represent three states of the world:</em></p>\n<ul>\n<li>\n\n<p>\ninitial state</p></li>\n<li>\n\n<p>\ncurrent state</p></li>\n<li>\n\n<p>\ngoal state</p></li>\n</ul>\n\n<p>\nWith these 3 states, anyone can construct a planner that produces a outcome based on the input of the user.</p>\n\n<p>\nThere are many kind of planners, such as STRIPS, CLP(FD)and FRAME. This website will cover and walk through \nsome STRIPS style, and also briefly cover the implementaions of CLP(FD) and FRAME.</p>")).
end.
begin.
end.
